<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SVG Drawing Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .tool-btn.active {
            background-color: #4f46e5;
            color: white;
        }
        #drawingCanvas {
            cursor: crosshair;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center h-screen">
    <div class="w-full max-w-4xl bg-white rounded-lg shadow-lg p-6">
        <h1 class="text-2xl font-bold text-center text-gray-800 mb-4">SVG Drawing Tool</h1>
        
        <div class="flex justify-center space-x-2 mb-4">
            <button id="rectBtn" class="tool-btn active px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-indigo-500 hover:text-white transition">Rectangle</button>
            <button id="circleBtn" class="tool-btn px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-indigo-500 hover:text-white transition">Circle</button>
            <button id="clearBtn" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition">Clear</button>
        </div>

        <div class="border-2 border-gray-300 rounded-md overflow-hidden">
            <svg id="drawingCanvas" width="100%" height="500"></svg>
        </div>
    </div>

    <script>
        const drawingCanvas = document.getElementById('drawingCanvas');
        const rectBtn = document.getElementById('rectBtn');
        const circleBtn = document.getElementById('circleBtn');
        const clearBtn = document.getElementById('clearBtn');
        const toolBtns = document.querySelectorAll('.tool-btn');
        const svgNS = "http://www.w3.org/2000/svg";

        let isDrawing = false;
        let currentShape = 'rect';
        let startX, startY;
        let currentElement = null;

        toolBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                toolBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });
        
        rectBtn.addEventListener('click', () => currentShape = 'rect');
        circleBtn.addEventListener('click', () => currentShape = 'circle');
        clearBtn.addEventListener('click', () => {
            drawingCanvas.innerHTML = '';
        });

        drawingCanvas.addEventListener('mousedown', (e) => {
            isDrawing = true;
            startX = e.offsetX;
            startY = e.offsetY;

            currentElement = document.createElementNS(svgNS, currentShape);
            currentElement.setAttribute('stroke', '#333');
            currentElement.setAttribute('stroke-width', '2');
            currentElement.setAttribute('fill', 'rgba(100, 100, 200, 0.2)');
            
            if (currentShape === 'rect') {
                currentElement.setAttribute('x', startX);
                currentElement.setAttribute('y', startY);
            } else if (currentShape === 'circle') {
                currentElement.setAttribute('cx', startX);
                currentElement.setAttribute('cy', startY);
            }

            drawingCanvas.appendChild(currentElement);
        });

        drawingCanvas.addEventListener('mousemove', (e) => {
            if (!isDrawing) return;

            const currentX = e.offsetX;
            const currentY = e.offsetY;
            const width = currentX - startX;
            const height = currentY - startY;

            if (currentShape === 'rect') {
                currentElement.setAttribute('x', width > 0 ? startX : currentX);
                currentElement.setAttribute('y', height > 0 ? startY : currentY);
                currentElement.setAttribute('width', Math.abs(width));
                currentElement.setAttribute('height', Math.abs(height));
            } else if (currentShape === 'circle') {
                const radius = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
                currentElement.setAttribute('r', radius);
            }
        });

        drawingCanvas.addEventListener('mouseup', () => {
            isDrawing = false;
            currentElement = null;
        });
        
        drawingCanvas.addEventListener('mouseleave', () => {
            if(isDrawing) {
                 isDrawing = false;
                 currentElement = null;
            }
        });
    </script>
</body>
</html>
